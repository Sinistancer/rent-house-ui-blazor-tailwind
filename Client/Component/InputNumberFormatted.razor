@inherits InputBase<TValue>
@typeparam TValue
@using System.Globalization
@using System.Text.RegularExpressions

@inject IJSRuntime JSRuntime

<input @attributes="AdditionalAttributes"
       class="@CssClass"
       value="@stringValue"
       @oninput="OnInput"
       @onchange="OnValueChanged"
       min="@MinValue"
       max="@MaxValue"
       data-val-required="The value is required."
       data-val-range="The value must be between @MinValue and @MaxValue."
       @ref="inputElement" />


@code {

    [Parameter] public string FormatString { get; set; }
    [Parameter] public bool IsRequired { get; set; } = true;
    [Parameter] public decimal MinValue { get; set; } = 1;
    [Parameter] public decimal MaxValue { get; set; } = 20000000;

    private string stringValue = null;
    private string _currentValue = null;
    private ElementReference inputElement;

    // Sets up the initial value of the input
    protected override void OnInitialized()
    {
        this.stringValue = this.FormatValueAsString(this.Value);
        this.stringValue = this.stringValue.Replace(',', '#').Replace('.', ',').Replace('#', '.');
        base.OnInitialized();
    }

    // The Renderer still thinks the value of the input is what we last set it to, not what the user has just typed
    // So we need to con the Renderer that the value is something else first before we set it properly.
    // The diffing engine then sees the change and updatea the browser
    // we use a task based event handler so we get two render events, one on the first yield and one on completion
    private async Task OnInput(ChangeEventArgs e)
    {
        _currentValue = e.Value.ToString();
        _currentValue = RemoveThousandSeparators(_currentValue);

        stringValue = "";
        await Task.Yield();
        var val = GetNumbers(_currentValue);
        if (BindConverter.TryConvertTo<TValue>(val, CultureInfo.InvariantCulture, out TValue? value))
        {
            this.stringValue = this.FormatValueAsString(value);
            this.stringValue = this.stringValue.Replace(',', '#').Replace('.', ',').Replace('#', '.');
            CurrentValue = value;
        }
        else
            stringValue = null;
        StateHasChanged();
    }

    // We set the base CurrentValueAsString to let it handle all the EditContext changes and validation process
    private async Task OnValueChanged(ChangeEventArgs e)
    {
        this.CurrentValueAsString = e.Value.ToString();
        this.CurrentValueAsString = RemoveThousandSeparators(this.CurrentValueAsString);

        await JSRuntime.InvokeVoidAsync("validateInput", inputElement, MinValue, MaxValue);
    }

    // Validate the value based on the type
    private bool IsValidValue(TValue value)
    {
        switch (value)
        {
            case int @int:
                return @int >= MinValue && @int <= MaxValue;
            case long @long:
                return @long >= MinValue && @long <= MaxValue;
            case short @short:
                return @short >= MinValue && @short <= MaxValue;
            case float @float:
                return @float >= (float)MinValue && @float <= (float)MaxValue;
            case double @double:
                return @double >= (double)MinValue && @double <= (double)MaxValue;
            case decimal @decimal:
                return @decimal >= MinValue && @decimal <= MaxValue;
            default:
                return false;
        }
    }

    // Necessary override for InputBase
    protected override bool TryParseValueFromString(string? value, out TValue? result, out string? validationErrorMessage)
    {
        if (BindConverter.TryConvertTo<TValue?>(value, System.Globalization.CultureInfo.InvariantCulture, out result))
        {
            if (IsValidValue(result))
            {
                validationErrorMessage = null;
                return true;
            }
            else
            {
                validationErrorMessage = $"Value must be between {MinValue} and {MaxValue}";
                return false;
            }
        }
        else
        {
            validationErrorMessage = "Can't parse value";
            return false;
        }
    }

    private string RemoveThousandSeparators(string value)
    {
        return value.Replace(".", "").Replace(",", "");
    }

    // Gets only the numbers in the input string
    // ignores any other chars including our commas
    private static string GetNumbers(string input)
        => new string(input.Where(c => (char.IsDigit(c)) || c.Equals('.')).ToArray());

    protected override string? FormatValueAsString(TValue? value)
    {
        string val = null;

        //use Regex to see if we have a decimal with or without trailing zeros
        // We need to detect these as ToString() will ignore them.
        var reg = new Regex(@"(\.0*)$");
        Match match = null;
        if (_currentValue is not null)
            match = reg.Match(_currentValue);
        var hasDecimal = match?.Success ?? false;
        string decimals = hasDecimal
            ? match.Groups[1].Value
            : string.Empty;

        // Avoiding a cast to IFormattable to avoid boxing.
        switch (value)
        {
            case null:
                return null;

            case int @int:
                return @int.ToString(this.FormatString);

            case long @long:
                return @long.ToString(this.FormatString);

            case short @short:
                return @short.ToString(this.FormatString);

            case float @float:
                val = @float.ToString(this.FormatString);
                break;

            case double @double:
                val = @double.ToString(this.FormatString);
                break;

            case decimal @decimal:
                val = @decimal.ToString(this.FormatString);
                break;

            default:
                throw new InvalidOperationException($"Unsupported type {value.GetType()}");
        }
        return hasDecimal ? $"{val}{decimals}" : val;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("validateInput", inputElement, MinValue, MaxValue);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await JSRuntime.InvokeVoidAsync("validateInput", inputElement, MinValue, MaxValue);
    }
}