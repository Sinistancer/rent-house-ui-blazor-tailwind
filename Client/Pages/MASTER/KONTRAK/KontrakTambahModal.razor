@using System.Globalization
@using daryon_house_ui.Client.Application
@using daryon_house_ui.Client.Component
@using daryon_house_ui.Client.Model
@using daryon_house_ui.Shared
@using Microsoft.AspNetCore.Components.Authorization
@using BlazorDateRangePicker

@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject ToastService ToastService

<!-- Main modal -->

<div class="relative w-full max-w-xl max-h-full">
    <!-- Modal content -->
    <div class="relative bg-white rounded-lg shadow dark:bg-gray-700">
        <!-- Modal header -->
        <div class="flex items-center justify-between p-4 md:p-5 border-b rounded-t dark:border-gray-600">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white">
                @(IsEdit ? "Edit Kontrak" : "Tambah Kontrak Baru")
            </h3>
            <button @onclick="CloseModal" type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white" data-modal-toggle="crud-modal">
                <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6" />
                </svg>
                <span class="sr-only">Close modal</span>
            </button>
        </div>
        <!-- Modal body -->
        <EditForm class="p-4 md:p-5" Model="Kontrak" OnValidSubmit="HandleValidSubmit">
            <div class="grid gap-4 mb-4 grid-cols-2">
                <div class="col-span-1">
                    <label for="kontrakId" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">No. Rumah</label>
                    <select @bind="@SelectedKontrakId" id="kontrakId" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
                        <option value="00000000-0000-0000-0000-000000000000" disabled selected>-- Pilih salah satu --</option>
                        @foreach (KontrakDropdown kontrak in DataKontrakDropdown)
                        {
                            <option value="@kontrak.Id">@kontrak.Name</option>
                        }
                    </select>
                </div>
                <div class="col-span-1">
                    <label for="username" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Penyewa</label>
                    <select @bind="@SelectedUserName" id="username" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
                        <option value="" disabled selected>-- Pilih salah satu --</option>
                        @foreach (ApplicationUserDropdown applicationUser in DataPenyewaDropdown)
                        {
                            <option value="@applicationUser.UserName">@applicationUser.Name</option>
                        }
                    </select>
                </div>
                <div class="col-span-1">
                    <label for="status" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Status Sewa</label>
                    <select @bind="@SelectedStatus" id="status" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
                        <option value="0" disabled selected>-- Pilih salah satu --</option>
                        <option value="1">Monthly</option>
                        <option value="2">Biannual</option>
                        <option value="3">Yearly</option>
                    </select>
                </div>
                <div class="col-span-1">
                    <label for="payment_status" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Status Bayar</label>
                    <select @bind="@SelectedPaymentStatus" id="payment_status" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
                        <option value="" disabled selected>-- Pilih salah satu --</option>
                        <option value="false">Belum Lunas</option>
                        <option value="true">Lunas</option>
                    </select>
                </div>
                <div class="col-span-1">
                    <label for="end_date" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Masa Sewa</label>
                    <div class="relative max-w-sm">
                        <div class="absolute inset-y-0 start-0 flex items-center ps-3.5 pointer-events-none">
                            <svg class="w-4 h-4 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M20 4a2 2 0 0 0-2-2h-2V1a1 1 0 0 0-2 0v1h-3V1a1 1 0 0 0-2 0v1H6V1a1 1 0 0 0-2 0v1H2a2 2 0 0 0-2 2v2h20V4ZM0 18a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V8H0v10Zm5-8h10a1 1 0 0 1 0 2H5a1 1 0 0 1 0-2Z" />
                            </svg>
                        </div>
                        <DateRangePicker @bind-StartDate="StartDate" @bind-EndDate="EndDate" @bind="@SelectedMasaSewa" Drops="DropsType.Up" Culture="@(System.Globalization.CultureInfo.GetCultureInfo("id-ID"))" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full ps-10 p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="Select date">
                            <ButtonsTemplate Context="buttonTemplateContext">
                                <button @onclick="@buttonTemplateContext.ClickCancel" type="button" class="px-3 py-2 text-xs font-medium text-center text-white bg-green-700 rounded-lg hover:bg-green-800 focus:ring-4 focus:outline-none focus:ring-green-300 dark:bg-green-600 dark:hover:bg-green-700 dark:focus:ring-green-800">
                                    Batal
                                </button>
                                <button class=@((buttonTemplateContext.TStartDate == null || buttonTemplateContext.TEndDate == null) ? "px-3 py-2 text-xs font-medium text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 cursor-not-allowed" : "px-3 py-2 text-xs font-medium text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800")
                                        @onclick="@buttonTemplateContext.ClickApply"
                                        disabled="@(buttonTemplateContext.TStartDate == null || buttonTemplateContext.TEndDate == null)"
                                        type="button">
                                    Apply
                                </button>
                            </ButtonsTemplate>
                        </DateRangePicker>
                    </div>
                </div>
            </div>
            <button type="submit" class="text-white inline-flex items-center bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                <svg class="me-1 -ms-1 w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd"></path></svg>
                @(IsEdit ? "Edit Kontrak" : "Tambah Kontrak Baru")
            </button>
        </EditForm>
    </div>
</div>

@code {
    private Guid _selectedKontrakId;
    private string _selectedUserName;
    private int _selectedStatus;
    private string _selectedPaymentStatus;
    private string _selectedRangeDate;
    private string _selectedMasaSewa;

    private List<KontrakDropdown> _DataKontrakDropdown;

    [Parameter]
    public List<KontrakDropdown> DataKontrakDropdown
    {
        get => _DataKontrakDropdown;
        set
        {
            if (_DataKontrakDropdown != value)
            {
                _DataKontrakDropdown = value;
            }
        }
    }

    private List<ApplicationUserDropdown> _DataPenyewaDropdown;

    [Parameter]
    public List<ApplicationUserDropdown> DataPenyewaDropdown
    {
        get => _DataPenyewaDropdown;
        set
        {
            if (_DataPenyewaDropdown != value)
            {
                _DataPenyewaDropdown = value;
            }
        }
    }

    [Parameter]
    public EventCallback OnPropertySaved { get; set; }

    [Parameter]
    public EventCallback OnPropertyAdd { get; set; }

    [Parameter]
    public KontrakResponse Kontrak { get; set; }

    [Parameter]
    public bool IsEdit { get; set; }

    [Parameter]
    public DateTimeOffset? StartDate { get; set; }

    [Parameter]
    public DateTimeOffset? EndDate { get; set; }

    [Parameter]
    public Guid SelectedKontrakId
    {
        get => _selectedKontrakId;
        set
        {
            _selectedKontrakId = value;
        }
    }

    public KontrakRequest KontrakRequest { get; set; }

    private string SelectedUserName
    {
        get => _selectedUserName;
        set
        {
            _selectedUserName = value;
        }
    }

    private int SelectedStatus
    {
        get => _selectedStatus;
        set
        {
            _selectedStatus = value;
        }
    }

    private string SelectedPaymentStatus
    {
        get => _selectedPaymentStatus;
        set
        {
            _selectedPaymentStatus = value;
        }
    }

    private string SelectedMasaSewa
    {
        get => _selectedMasaSewa;
        set
        {
            _selectedMasaSewa = value;
        }
    }

    private ElementReference inputElement;

    private async Task CloseModal()
    {
        await JSRuntime.InvokeVoidAsync("visibilityElement", "crud-modal");
    }

    private async Task HandleValidSubmit()
    {
        if (!IsEdit)
        {
            KontrakRequest.PropertyId = SelectedKontrakId;
            KontrakRequest.UserName = SelectedUserName;
            KontrakRequest.Status = (daryon_house_ui.Shared.Enum.TenantStatus)SelectedStatus - 1;
            KontrakRequest.PaymentStatus = bool.Parse(SelectedPaymentStatus);
            KontrakRequest.StarDate = StartDate.Value.DateTime;
            KontrakRequest.EndDate = EndDate.Value.DateTime;

            var response = await Http.PostAsJsonAsync("Tenant/Create", Kontrak);

            await JSRuntime.InvokeVoidAsync("visibilityElement", "crud-modal");

            KontrakRequest = new KontrakRequest();
            SelectedKontrakId = Guid.Empty;
            SelectedUserName = string.Empty;
            SelectedStatus = 0;
            SelectedPaymentStatus = null;
            SelectedPaymentStatus = null;
            SelectedMasaSewa = string.Empty;

            try
            {
                if (response.IsSuccessStatusCode)
                {
                    var result = await response.Content.ReadFromJsonAsync<BaseResponseModel<bool>>();
                    if (result.Status)
                    {
                        ToastService.ShowToast(result.Message, "success");
                    }
                    else
                    {
                        ToastService.ShowToast(result.Message, "error");
                    }

                    await OnPropertySaved.InvokeAsync();
                }
                else
                {
                    var result = await response.Content.ReadFromJsonAsync<BaseResponseModel<bool>>();
                    ToastService.ShowToast("An error occurred while saving data.", "error");
                    KontrakRequest = new KontrakRequest();
                }
            }
            catch (Exception ex)
            {
                ToastService.ShowToast("An error occurred while saving data.", "error");
                KontrakRequest = new KontrakRequest();
            }
        }
        else
        {
            // var response = await Http.PostAsJsonAsync("ApplicationUser/Update", ApplicationUser);

            // await JSRuntime.InvokeVoidAsync("visibilityElement", "crud-modal");

            // try
            // {
            //     if (response.IsSuccessStatusCode)
            //     {
            //         var result = await response.Content.ReadFromJsonAsync<BaseResponseModel<bool>>();
            //         if (result.Status)
            //         {
            //             ToastService.ShowToast($"{result.Message}: {ApplicationUser.Name}", "success");
            //         }
            //         else
            //         {
            //             ToastService.ShowToast(result.Message, "error");
            //         }

            //         ApplicationUser = new ApplicationUserRequest();
            //         await OnPropertySaved.InvokeAsync();
            //     }
            //     else
            //     {
            //         var result = await response.Content.ReadFromJsonAsync<BaseResponseModel<bool>>();
            //         ToastService.ShowToast("An error occurred while saving data.", "error");
            //         ApplicationUser = new ApplicationUserRequest();
            //     }
            // }
            // catch (Exception ex)
            // {
            //     ToastService.ShowToast("An error occurred while saving data.", "error");
            //     Kontrak = new KontrakRequest();
            // }
        }
    }
}