@using System.Globalization
@using daryon_house_ui.Client.Application
@using daryon_house_ui.Client.Component
@using daryon_house_ui.Client.Model
@using daryon_house_ui.Shared

@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject ToastService ToastService

<!-- Main modal -->

<div class="relative w-full max-w-md max-h-full">
    <!-- Modal content -->
    <div class="relative bg-white rounded-lg shadow dark:bg-gray-700">
        <!-- Modal header -->
        <div class="flex items-center justify-between p-4 md:p-5 border-b rounded-t dark:border-gray-600">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white">
                @(IsEdit ? "Edit Rumah" : "Tambah Rumah Baru")
            </h3>
            <button @onclick="CloseModal" type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white" data-modal-toggle="crud-modal">
                <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6" />
                </svg>
                <span class="sr-only">Close modal</span>
            </button>
        </div>
        <!-- Modal body -->
        <EditForm class="p-4 md:p-5" Model="Property" OnValidSubmit="HandleValidSubmit">
            @* <DataAnnotationsValidator />
            <ValidationSummary /> *@

            <div class="grid gap-4 mb-4 grid-cols-2">
                <div class="col-span-2">
                    <label for="name" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">No. Rumah</label>
                    <InputText type="text" autocomplete="off" @bind-Value="Property.Name" name="name" id="name" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" placeholder="Ketik Nama Rumah ..." required />
                </div>
                <div class="col-span-2">
                    <label for="address" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Alamat</label>
                    <InputText type="text" autocomplete="on" @bind-Value="Property.Address" name="address" id="address" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" placeholder="Ketik Alamat ..." required />
                </div>
                <div class="col-span-1">
                    <label for="price" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Harga</label>
                    <InputNumberFormatted @bind-Value="Property.Price" name="price" id="price" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" placeholder="0" required @oninput="FormatPrice" FormatString="N0" MinValue="1" MaxValue="20000000" />
                    @* <ValidationMessage For="@(() => newProperty.Price)" /> *@
                </div>
                <div class="col-span-1">
                    <label for="wide" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Luas Tanah</label>
                    <InputText type="number" @bind-Value="Property.Wide" name="wide" id="wide" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" placeholder="0" required min="1" max="100" />
                </div>
                <div class="col-span-1">
                    <label for="totalRoom" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Jumlah Kamar</label>
                    <InputText type="number" @bind-Value="Property.TotalRoom" name="totalRoom" id="totalRoom" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" placeholder="0" required min="1" max="10" />
                </div>
                <div class="col-span-2">
                    <label for="facility" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Fasilitas </label><p class="italic text-xxs text-gray-900 dark:text-white">Note: jika lebih dari satu bisa menggunakan koma (,)</p>
                    <InputTextArea id="facility" name="facility" @bind-Value="Property.Facility" rows="4" class="block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="Ketik fasilitas yang tersedia ..."></InputTextArea>
                </div>
            </div>
            <button type="submit" class="text-white inline-flex items-center bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                <svg class="me-1 -ms-1 w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd"></path></svg>
                @(IsEdit ? "Edit Rumah" : "Tambah Rumah Baru")
            </button>
        </EditForm>
    </div>
</div>

@code {
    //private PropertyRequest newProperty = new PropertyRequest();
    public decimal MinValue = 1;
    public decimal MaxValue = 20000000;

    private ElementReference inputElement;

    [Parameter]
    public EventCallback OnPropertySaved { get; set; }

    [Parameter]
    public EventCallback OnPropertyAdd { get; set; }

    [Parameter] 
    public PropertyRequest Property { get; set; }

    [Parameter]
    public bool IsEdit { get; set; }

    private void FormatPrice(ChangeEventArgs e)
    {
        if (decimal.TryParse(e.Value.ToString(), out var result))
        {
            Property.Price = result;
        }
    }

    private async Task CloseModal()
    {
        await JSRuntime.InvokeVoidAsync("visibilityElement", "crud-modal");
    }

    private async Task HandleValidSubmit()
    {
        if (!IsEdit)
        {
            var response = await Http.PostAsJsonAsync("Property/Create", Property);

            await JSRuntime.InvokeVoidAsync("visibilityElement", "crud-modal");

            try
            {
                if (response.IsSuccessStatusCode)
                {
                    var result = await response.Content.ReadFromJsonAsync<BaseResponseModel<bool>>();
                    if (result.Status)
                    {
                        ToastService.ShowToast(result.Message, "success");
                    }
                    else
                    {
                        ToastService.ShowToast(result.Message, "error");
                    }

                    Property = new PropertyRequest();
                    await OnPropertySaved.InvokeAsync();
                }
                else
                {
                    var result = await response.Content.ReadFromJsonAsync<BaseResponseModel<bool>>();
                    ToastService.ShowToast("An error occurred while saving data.", "error");
                    Property = new PropertyRequest();
                }
            }
            catch (Exception ex)
            {
                ToastService.ShowToast("An error occurred while saving data.", "error");
                Property = new PropertyRequest();
            }
        }
        else
        {
            var response = await Http.PostAsJsonAsync("Property/Update", Property);

            await JSRuntime.InvokeVoidAsync("visibilityElement", "crud-modal");

            try
            {
                if (response.IsSuccessStatusCode)
                {
                    var result = await response.Content.ReadFromJsonAsync<BaseResponseModel<bool>>();
                    if (result.Status)
                    {
                        ToastService.ShowToast($"{result.Message}: {Property.Name}", "success");
                    }
                    else
                    {
                        ToastService.ShowToast(result.Message, "error");
                    }

                    Property = new PropertyRequest();
                    await OnPropertySaved.InvokeAsync();
                }
                else
                {
                    var result = await response.Content.ReadFromJsonAsync<BaseResponseModel<bool>>();
                    ToastService.ShowToast("An error occurred while saving data.", "error");
                    Property = new PropertyRequest();
                }
            }
            catch (Exception ex)
            {
                ToastService.ShowToast("An error occurred while saving data.", "error");
                Property = new PropertyRequest();
            }
        }
    }
}