@page "/home"
@using System.Globalization
@using Newtonsoft.Json
@using System.Net
@using daryon_house_ui.Client.Application
@using daryon_house_ui.Shared
@using daryon_house_ui.Client.Component
@using daryon_house_ui.Client.Model

@inject HttpClient Http
@inject ConverterService ConverterService
@inject IJSRuntime JSRuntime
@inject ToastService ToastService

@attribute [Authorize]

<PageTitle>Data Penyewa Rumah</PageTitle>

<!-- Breadcrumb -->
<nav class="flex px-5 py-3 text-gray-700 border border-gray-200 rounded-lg bg-gray-50 dark:bg-gray-800 dark:border-gray-700 mb-4" aria-label="Breadcrumb">
    <ol class="inline-flex items-center space-x-1 md:space-x-2 rtl:space-x-reverse">
        <li class="inline-flex items-center">
            <a href="home" class="inline-flex items-center text-sm font-medium text-gray-700 hover:text-blue-600 dark:text-gray-400 dark:hover:text-white">
                <svg class="w-3 h-4 me-2.5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M11.293 3.293a1 1 0 0 1 1.414 0l6 6 2 2a1 1 0 0 1-1.414 1.414L19 12.414V19a2 2 0 0 1-2 2h-3a1 1 0 0 1-1-1v-3h-2v3a1 1 0 0 1-1 1H7a2 2 0 0 1-2-2v-6.586l-.293.293a1 1 0 0 1-1.414-1.414l2-2 6-6Z" clip-rule="evenodd" />
                </svg>
                Data Rumah
            </a>
        </li>
    </ol>
</nav>

<div class="h-10 rounded">
    <button @onclick="ToggleModal" data-modal-target="crud-modal" data-modal-toggle="crud-modal" type="button" class="px-3 py-2 text-xs font-medium text-center inline-flex items-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
        <svg class="w-3 h-3 text-white me-2" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="2 0 20 22">
            <path fill-rule="evenodd" d="M2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10S2 17.523 2 12Zm11-4.243a1 1 0 1 0-2 0V11H7.757a1 1 0 1 0 0 2H11v3.243a1 1 0 1 0 2 0V13h3.243a1 1 0 1 0 0-2H13V7.757Z" clip-rule="evenodd" />
        </svg>
        Tambah
    </button>
</div>

<HomeListingPage DataLists="properties" OnPropertySaved="UpdatePropertyList" OnPropertyEditing="UpdateProperty" />

<div class="relative mt-2 overflow-x-auto flex justify-between items-center">
    <PaginationComponent Page="Page" PageSize="PageSize" TotalItems="TotalItems" CurrentCount="properties.Count" OnPageChanged="GetPropertiesData" />
</div>

<div id="crud-modal" tabindex="-1" aria-hidden="true" class="hidden overflow-y-auto overflow-x-hidden fixed top-0 right-0 left-0 z-50 justify-center items-center w-full md:inset-0 h-[calc(100%-1rem)] max-h-full">
    <HomeTambahModal OnPropertyAdd="ToggleModal" OnPropertySaved="UpdatePropertyList" Property="Property" IsEdit="IsEdit" />
</div>

@code {
    private List<Property> properties = new List<Property>();
    private int Page = 1;
    private int PageSize = 10;
    private int TotalItems;
    private bool IsEdit;
    private PropertyRequest Property = new PropertyRequest();

    protected override async Task OnInitializedAsync()
    {
        await GetPropertiesData(Page);
    }

    private async Task UpdatePropertyList()
    {
        await GetPropertiesData(Page);

        StateHasChanged();
    }

    private async Task UpdateProperty(Guid itemId)
    {
        IsEdit = true;
        try
        {
            var url = $"https://localhost:7189/Property/Detail";

            var request = new HttpRequestMessage(HttpMethod.Get, $"{url}?id={itemId}");

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                var responseData = await response.Content.ReadFromJsonAsync<BaseResponseModel<Property>>();
                Property = new PropertyRequest()
                    {
                        Id = responseData.Data.Id,
                        Name = responseData.Data.Name,
                        Address = responseData.Data.Address,
                        Facility = responseData.Data.Facility,
                        Price = responseData.Data.Price,
                        TotalRoom = responseData.Data.TotalRoom.ToString(),
                        Wide = responseData.Data.Wide.ToString()
                    };
                //TotalItems = responseData.TotalItems;
            }
            else
            {
                // Handle the case when the request was not successful
                // You might want to log the error or handle it according to your application's logic
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast("An error occurred while click icon editing.", "error");
        }

        await JSRuntime.InvokeVoidAsync("toggleModal", "crud-modal");
    }

    private async Task ToggleModal()
    {
        Property = new PropertyRequest();
        IsEdit = false;
        await JSRuntime.InvokeVoidAsync("toggleModal", "crud-modal");
    }

    private async Task GetPropertiesData(int newPage)
    {
        Page = newPage;
        try
        {
            var url = $"https://localhost:7189/Property";

            var request = new HttpRequestMessage(HttpMethod.Get, $"{url}?page={newPage}&pageSize={PageSize}");

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                var responseData = await response.Content.ReadFromJsonAsync<BaseListResponseModel<Property>>();
                properties = responseData.Data;
                TotalItems = responseData.TotalItems;
            }
            else
            {
                // Handle the case when the request was not successful
                // You might want to log the error or handle it according to your application's logic
            }
        }
        catch (Exception ex)
        {
            properties = null;

            await JSRuntime.InvokeVoidAsync("hideLoadingMessage");
        }
    }
}